
;; Function printf (printf, funcdef_no=15, decl_uid=964, cgraph_uid=16, symbol_order=15)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after Early VRP:

__fmt_2(D): const char * restrict [1B, +INF]
_4: int VARYING


__attribute__((artificial, gnu_inline, always_inline))
__attribute__((nonnull (1), format (printf, 1, 2)))
int printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> :
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function main (main, funcdef_no=23, decl_uid=2545, cgraph_uid=24, symbol_order=23)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

f_6 -> { f_3 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 6
Number of blocks to update: 3 ( 50%)



Value ranges after Early VRP:

n.0_1: int VARYING
i_2: int [2, +INF]
f_3: int VARYING
f_6: int [f_3, f_3]
f_13: int VARYING
i_14: int [3, +INF]
_15: int VARYING
_16: int VARYING


int main ()
{
  int g;
  int f;
  int n;
  int i;
  int n.0_1;
  int _15;
  int _16;

  <bb 2> :
  scanf ("%d", &n);
  goto <bb 4>; [INV]

  <bb 3> :
  f_13 = i_2 * f_3;
  i_14 = i_2 + 1;

  <bb 4> :
  # i_2 = PHI <2(2), i_14(3)>
  # f_3 = PHI <1(2), f_13(3)>
  n.0_1 = n;
  if (n.0_1 >= i_2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # f_6 = PHI <f_3(4)>
  _16 = __printf_chk (1, "%d", f_6);
  _15 = __printf_chk (1, "\n");
  n ={v} {CLOBBER};
  return 0;

}


